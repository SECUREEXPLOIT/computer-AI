import pyttsx3
import speech_recognition as sr
import openai
import webbrowser

# === CONFIG ===
openai.api_key = "YOUR_OPENAI_API_KEY"  # Replace with your OpenAI key
USE_VOICE = False  # Set to True for microphone input

# === TTS SETUP ===
engine = pyttsx3.init()
engine.setProperty('rate', 175)

def speak(text):
    print("ðŸ§  COMPUTER:", text)
    engine.say(text)
    engine.runAndWait()

# === SPEECH INPUT ===
def listen():
    if USE_VOICE:
        r = sr.Recognizer()
        with sr.Microphone() as source:
            print("ðŸŽ¤ Listening...")
            audio = r.listen(source)
        try:
            query = r.recognize_google(audio)
            print("You said:", query)
            return query.lower()
        except:
            speak("Sorry, I didn't understand.")
            return ""
    else:
        return input("ðŸ§‘ You: ").lower()

# === WEBSITE OPENER ===
import webbrowser
import json
import os

# === LOAD SITES ===
def load_sites():
    try:
        with open("websites.json", "r") as f:
            return json.load(f)
    except:
        speak("Failed to load websites.")
        return {}

# === OPEN WEBSITE ===
def open_website(command):
    sites = load_sites()

    for key in sites:
        if key in command:
            webbrowser.open(sites[key])
            speak(f"Opening {key}")
            return True

    # Optional: Fallback Google Search
    if "search" in command or "look up" in command:
        query = command.replace("search", "").replace("look up", "").strip()
        url = f"https://www.google.com/search?q={query}"
        webbrowser.open(url)
        speak(f"Searching Google for {query}")
        return True

    return False


# === OPENAI CHAT ===
def ask_openai(question):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",  # or "gpt-4"
            messages=[
                {"role": "system", "content": "You are SecureExploit, a helpful and skilled AI assistant."},
                {"role": "user", "content": question}
            ]
        )
        reply = response["choices"][0]["message"]["content"]
        speak(reply)
    except Exception as e:
        speak("OpenAI error occurred.")
        print(e)

# === MAIN LOOP ===
def run_assistant():
    speak("Hello, this is the computer. Ready to assist you.")
    while True:
        command = listen()

        if command in ("exit", "quit", "goodbye", "bye"):
            speak("Goodbye, stay secure.")
            break

        if command.strip() == "":
            continue

        if open_website(command):
            continue

        ask_openai(command)

# === START ===
if __name__ == "__main__":
    run_assistant()
